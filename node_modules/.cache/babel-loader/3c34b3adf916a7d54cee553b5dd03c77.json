{"ast":null,"code":"var _jsxFileName = \"/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/components/generate.js\";\nimport React from 'react';\nimport { getKatData, getPalette } from '../util/dao';\nimport { applyColorPalette, getBackgroundColorMap, redrawFromMatrix, mergeLayers } from '../util/generator-helper';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Generator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      Face: {},\n      Accessories: {},\n      Background: {},\n      Merged: null,\n      ImgData: null,\n      ActiveAccessories: [],\n      TopCoord: [],\n      MidCoord: [],\n      BottomCoord: [],\n      FaceCoord: [],\n      BackgroundCoord: []\n    };\n  }\n\n  _getAccessoryCoordinatFromState(placement) {\n    switch (placement) {\n      case \"top\":\n        return this.state.TopCoord;\n\n      case \"mid\":\n        return this.state.MidCoord;\n\n      case \"bottom\":\n        return this.state.BottomCoord;\n\n      default:\n        break;\n    }\n  }\n\n  _getAccessory(placement) {\n    let data = getAccessory(placement);\n    data.then(r => {\n      let activeAcc = _.cloneDeep(this.state.ActiveAccessories);\n\n      let accClone = _.cloneDeep(this.state.Accessories);\n\n      let newAccCoord = applyColorPalette(r[\"accessory\"][\"accessory\"], accClone[placement][\"palette\"][\"palette\"]);\n      let activeGroup = [];\n      activeAcc.forEach(item => {\n        if (item === placement) {\n          let newAccClone = _.cloneDeep(newAccCoord);\n\n          activeGroup.push(newAccClone);\n        } else {\n          let otherClone = _.cloneDeep(this._getAccessoryCoordinatFromState(item));\n\n          activeGroup.push(otherClone);\n        }\n      });\n      this.canvasRef.current.getContext(\"2d\").clearRect(0, 0, 240, 240);\n\n      let faceClone = _.cloneDeep(this.state.FaceCoord);\n\n      let bgClone = _.cloneDeep(this.state.Background);\n\n      let background = getBackgroundColorMap(bgClone[\"background\"][\"Background\"]);\n\n      const tempWriteBG = _.cloneDeep(background);\n\n      const tempWriteFace = _.cloneDeep(faceClone);\n\n      let base = mergeLayers(tempWriteBG, tempWriteFace);\n      let m = mergeLayers(activeGroup[0], activeGroup[1]);\n      let t = mergeLayers(base, m);\n      redrawFromMatrix(t, this.canvasRef.current.getContext(\"2d\"));\n      let imgData = this.canvasRef.current.toDataURL(\"image/png\");\n\n      switch (placement) {\n        case \"top\":\n          this.setState({\n            TopCoord: newAccCoord,\n            ImgData: imgData\n          });\n          break;\n\n        case \"mid\":\n          this.setState({\n            MidCoord: newAccCoord,\n            ImgData: imgData\n          });\n          break;\n\n        case \"bottom\":\n          this.setState({\n            BottomCoord: newAccCoord,\n            ImgData: imgData\n          });\n          break;\n\n        default:\n          break;\n      }\n    });\n  }\n\n  _redrawAccessory(placement) {\n    const editCoord = applyColorPalette(this.state.Accessories[placement][\"accessory\"][\"accessory\"], this.state.Accessories[placement][\"palette\"][\"palette\"]);\n    let combo = mergeLayers(this.state.Merged, editCoord);\n    redrawFromMatrix(combo, this.canvasRef.current.getContext(\"2d\"));\n    let imgData = this.canvasRef.current.toDataURL(\"image/png\");\n    this.setState({\n      Merged: combo,\n      ImgData: imgData\n    });\n  }\n\n  _drawInitialKat() {\n    let faceClone = _.cloneDeep(this.state.Face);\n\n    let bgClone = _.cloneDeep(this.state.Background);\n\n    let accClone = _.cloneDeep(this.state.Accessories);\n\n    let face = applyColorPalette(faceClone[\"face\"][\"Face\"], faceClone[\"palette\"][\"palette\"]);\n    let background = getBackgroundColorMap(bgClone[\"background\"][\"Background\"]);\n\n    const tempBg = _.cloneDeep(background);\n\n    const tempFace = _.cloneDeep(face);\n\n    let aGroup = {};\n    Object.keys(accClone).forEach(placement => {\n      aGroup[placement] = applyColorPalette(accClone[placement][\"accessory\"][\"accessory\"], accClone[placement][\"palette\"][\"palette\"]);\n    });\n    let base = mergeLayers(background, face);\n\n    let aGroupClone = _.cloneDeep(aGroup);\n\n    let ags = Object.values(aGroupClone);\n    let agk = Object.keys(aGroupClone);\n    let agsIndex = Math.floor(Math.random() * ags.length);\n    ags.splice(agsIndex, 1); // active accessories: (randomized two chosen)\n\n    agk.splice(agsIndex, 1); // active accessory names: (randomized two chosen)\n\n    let a = ags.reduce((acc, curr) => {\n      return mergeLayers(acc, curr);\n    });\n    let combo = mergeLayers(base, a);\n    redrawFromMatrix(combo, this.canvasRef.current.getContext(\"2d\"));\n    let imgData = this.canvasRef.current.toDataURL(\"image/png\");\n    this.setState({\n      ActiveAccessories: agk,\n      Merged: combo,\n      ImgData: imgData,\n      TopCoord: aGroup[\"top\"],\n      MidCoord: aGroup[\"mid\"],\n      BottomCoord: aGroup[\"bottom\"],\n      FaceCoord: tempFace,\n      BackgroundCoord: tempBg\n    });\n  }\n\n  _generateKat(e) {\n    e.preventDefault();\n    const data = getKatData();\n    data.then(r => {\n      console.log(\"data in promise\", r);\n      this.setState({\n        Face: r[\"face\"],\n        Accessories: r[\"accessories\"],\n        Background: r[\"background\"]\n      });\n\n      this._drawInitialKat();\n    });\n  }\n\n  _generateAccessoryPalette(type, placement) {\n    const data = getPalette(type);\n    data.then(r => {\n      console.log('response', r[\"palette\"]);\n      console.log('response', r[\"type\"]);\n      let ac = this.state.Accessories;\n      ac[placement][\"palette\"][\"palette\"] = r[\"palette\"];\n      this.setState({\n        Accessories: ac\n      });\n\n      this._redrawAccessory(placement);\n    });\n  }\n\n  _generateCanvas() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: this.canvasRef,\n        width: 240,\n        height: 240\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this);\n  }\n\n  _handleAccessoryPaletteChange(e, placment) {\n    e.preventDefault();\n\n    this._generateAccessoryPalette(\"accessory\", placment);\n  }\n\n  _handleAccessoryChange(e, placement) {\n    e.preventDefault();\n\n    this._getAccessory(placement);\n  }\n\n  _generateBtns() {\n    let activeAccessories = this.state.ActiveAccessories;\n    let btnRender = activeAccessories.map((item, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => this._handleAccessoryPaletteChange(e, item),\n      children: `Generate new ${item} accessory palette`\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this));\n    return btnRender;\n  }\n\n  _generateAccessoryBtns() {\n    let activeAccessories = this.state.ActiveAccessories;\n    let btnRender = activeAccessories.map((item, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => this._handleAccessoryChange(e, item),\n      children: `Generate new ${item} accessory`\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this));\n    return btnRender;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => this._generateKat(e),\n        children: \"Generate Kat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), this._generateCanvas(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), this.state.Merged && this.state.ImgData ? /*#__PURE__*/_jsxDEV(\"a\", {\n        href: this.state.ImgData,\n        download: true,\n        children: \"Download Kat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 60\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), this.state.Merged && this.state.ImgData ? this._generateBtns() : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this), this.state.Merged && this.state.ImgData ? this._generateAccessoryBtns() : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/components/generate.js"],"names":["React","getKatData","getPalette","applyColorPalette","getBackgroundColorMap","redrawFromMatrix","mergeLayers","_","Generator","Component","constructor","props","canvasRef","createRef","state","Face","Accessories","Background","Merged","ImgData","ActiveAccessories","TopCoord","MidCoord","BottomCoord","FaceCoord","BackgroundCoord","_getAccessoryCoordinatFromState","placement","_getAccessory","data","getAccessory","then","r","activeAcc","cloneDeep","accClone","newAccCoord","activeGroup","forEach","item","newAccClone","push","otherClone","current","getContext","clearRect","faceClone","bgClone","background","tempWriteBG","tempWriteFace","base","m","t","imgData","toDataURL","setState","_redrawAccessory","editCoord","combo","_drawInitialKat","face","tempBg","tempFace","aGroup","Object","keys","aGroupClone","ags","values","agk","agsIndex","Math","floor","random","length","splice","a","reduce","acc","curr","_generateKat","e","preventDefault","console","log","_generateAccessoryPalette","type","ac","_generateCanvas","_handleAccessoryPaletteChange","placment","_handleAccessoryChange","_generateBtns","activeAccessories","btnRender","map","index","_generateAccessoryBtns","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getKatData, getPalette} from '../util/dao';\nimport {applyColorPalette, getBackgroundColorMap, redrawFromMatrix, mergeLayers} from '../util/generator-helper';\nimport _ from 'lodash';\n\nexport class Generator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.state = {\n            Face: {},\n            Accessories: {},\n            Background: {},\n            Merged: null,\n            ImgData: null,\n            ActiveAccessories: [],\n            TopCoord: [],\n            MidCoord: [],\n            BottomCoord: [],\n            FaceCoord: [],\n            BackgroundCoord: []\n        }\n    }\n    _getAccessoryCoordinatFromState(placement) {\n        switch (placement) {\n            case \"top\":\n                return this.state.TopCoord\n            case \"mid\":\n                return this.state.MidCoord\n            case \"bottom\":\n                return this.state.BottomCoord\n            default:\n                break;\n        }\n    }\n\n    _getAccessory(placement) {\n        let data = getAccessory(placement)\n            data.then(r => {\n                let activeAcc = _.cloneDeep(this.state.ActiveAccessories)\n                let accClone = _.cloneDeep(this.state.Accessories);\n                let newAccCoord = applyColorPalette(r[\"accessory\"][\"accessory\"], accClone[placement][\"palette\"][\"palette\"]);\n\n                let activeGroup = []\n                activeAcc.forEach(item => {\n                    if (item === placement) {\n                        let newAccClone = _.cloneDeep(newAccCoord);\n                        activeGroup.push(newAccClone);\n                    } else {\n                        let otherClone = _.cloneDeep(this._getAccessoryCoordinatFromState(item));\n                        activeGroup.push(otherClone)\n                    }\n                })\n                this.canvasRef.current.getContext(\"2d\").clearRect(0,0,240,240);\n                let faceClone = _.cloneDeep(this.state.FaceCoord);\n\n                let bgClone = _.cloneDeep(this.state.Background);\n                let background = getBackgroundColorMap(bgClone[\"background\"][\"Background\"]);\n                const tempWriteBG = _.cloneDeep(background);\n                const tempWriteFace = _.cloneDeep(faceClone)\n                let base = mergeLayers(tempWriteBG, tempWriteFace);\n                let m = mergeLayers(activeGroup[0], activeGroup[1]);\n                let t = mergeLayers(base, m);\n                redrawFromMatrix(t, this.canvasRef.current.getContext(\"2d\"));\n                let imgData = this.canvasRef.current.toDataURL(\"image/png\");\n                switch (placement) {\n                    case \"top\":\n                        this.setState({\n                            TopCoord: newAccCoord,\n                            ImgData: imgData\n                        });\n                        break;\n                    case \"mid\":\n                        this.setState({\n                            MidCoord: newAccCoord,\n                            ImgData: imgData\n                        });\n                        break;\n                    case \"bottom\":\n                        this.setState({\n                            BottomCoord: newAccCoord,\n                            ImgData: imgData\n                        });\n                        break;\n                    default:\n                        break;\n                }\n            })\n    }\n\n    _redrawAccessory (placement) {\n        const editCoord = applyColorPalette(this.state.Accessories[placement][\"accessory\"][\"accessory\"],this.state.Accessories[placement][\"palette\"][\"palette\"] )\n        let combo = mergeLayers(this.state.Merged, editCoord)\n        redrawFromMatrix(combo, this.canvasRef.current.getContext(\"2d\"));\n        let imgData = this.canvasRef.current.toDataURL(\"image/png\");\n        this.setState({\n            Merged: combo,\n            ImgData: imgData\n        })\n    }\n\n    _drawInitialKat () {\n        let faceClone = _.cloneDeep(this.state.Face);\n        let bgClone = _.cloneDeep(this.state.Background);\n        let accClone = _.cloneDeep(this.state.Accessories);\n        let face = applyColorPalette(faceClone[\"face\"][\"Face\"],faceClone[\"palette\"][\"palette\"]);\n        let background = getBackgroundColorMap(bgClone[\"background\"][\"Background\"]);\n        const tempBg = _.cloneDeep(background);\n        const tempFace = _.cloneDeep(face);\n        let aGroup = {};\n        Object.keys(accClone).forEach(placement => {\n            aGroup[placement] = applyColorPalette(accClone[placement][\"accessory\"][\"accessory\"], accClone[placement][\"palette\"][\"palette\"]);\n        });\n        let base = mergeLayers(background, face);\n        let aGroupClone = _.cloneDeep(aGroup);\n        let ags = Object.values(aGroupClone);\n        let agk = Object.keys(aGroupClone);\n        let agsIndex = Math.floor(Math.random() * ags.length);\n        ags.splice(agsIndex, 1); // active accessories: (randomized two chosen)\n        agk.splice(agsIndex, 1); // active accessory names: (randomized two chosen)\n        let a = ags.reduce((acc, curr) => {\n            return mergeLayers(acc, curr);\n        });\n        let combo = mergeLayers(base, a);\n        redrawFromMatrix(combo, this.canvasRef.current.getContext(\"2d\"));\n\n        let imgData = this.canvasRef.current.toDataURL(\"image/png\");\n        this.setState({\n            ActiveAccessories: agk,\n            Merged: combo,\n            ImgData: imgData,\n            TopCoord: aGroup[\"top\"],\n            MidCoord: aGroup[\"mid\"],\n            BottomCoord: aGroup[\"bottom\"],\n            FaceCoord: tempFace,\n            BackgroundCoord: tempBg\n        });\n    }\n\n    _generateKat (e) {\n        e.preventDefault();\n        const data = getKatData();\n        data.then(r => {\n            console.log(\"data in promise\", r);\n            this.setState({\n                Face: r[\"face\"],\n                Accessories: r[\"accessories\"],\n                Background: r[\"background\"]\n            });\n            this._drawInitialKat();\n        })\n    }\n\n    _generateAccessoryPalette (type, placement) {\n        const data = getPalette(type);\n        data.then(r => {\n            console.log('response', r[\"palette\"]);\n            console.log('response', r[\"type\"]);\n            let ac = this.state.Accessories;\n            ac[placement][\"palette\"][\"palette\"] = r[\"palette\"];\n            this.setState({\n                Accessories: ac,\n            });\n            this._redrawAccessory(placement);\n        })\n    }\n\n    _generateCanvas() {\n        return (\n            <div>\n                <canvas ref={this.canvasRef} width={240} height={240} />\n            </div>\n        )\n    }\n\n    _handleAccessoryPaletteChange(e, placment) {\n        e.preventDefault();\n        this._generateAccessoryPalette(\"accessory\", placment);\n    }\n\n    _handleAccessoryChange(e, placement) {\n        e.preventDefault();\n        this._getAccessory(placement)\n    }\n\n    _generateBtns () {\n        let activeAccessories = this.state.ActiveAccessories;\n        let btnRender = activeAccessories.map((item, index) => (\n            <button key={index} onClick={(e) => this._handleAccessoryPaletteChange(e, item)}>{`Generate new ${item} accessory palette`}</button>\n        ));\n        return btnRender\n    }\n\n    _generateAccessoryBtns () {\n        let activeAccessories = this.state.ActiveAccessories;\n        let btnRender = activeAccessories.map((item, index) => (\n            <button key={index} onClick={(e) => this._handleAccessoryChange(e, item)}>{`Generate new ${item} accessory`}</button>\n        ));\n        return btnRender\n    }\n\n    render () {\n        return (\n            <div>\n                <button onClick={(e) => this._generateKat(e)}>Generate Kat</button>\n                {this._generateCanvas()}\n                <br/>\n                {this.state.Merged && this.state.ImgData ? <a href={this.state.ImgData} download>Download Kat</a> : null}\n                <br />\n                <br />\n                {this.state.Merged && this.state.ImgData ? this._generateBtns() : null}\n                <br />\n                <br />\n                {this.state.Merged && this.state.ImgData ? this._generateAccessoryBtns() : null}\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}