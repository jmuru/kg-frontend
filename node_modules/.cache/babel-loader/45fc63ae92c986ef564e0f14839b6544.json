{"ast":null,"code":"var _jsxFileName = \"/Users/josephmuruguru/go/src/github.com/kat-generator/src/components/upload.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Uploader extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.imgRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      file: '',\n      imagePreviewUrl: '',\n      colorMap: new Set()\n    };\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef;\n    const img = this.imgRef;\n    const ctx = canvas.current.getContext(\"2d\");\n  }\n\n  _handleSubmit(e) {\n    e.preventDefault(); // TODO: do something with -> this.state.file\n\n    console.log('handle uploading-', this.state.file);\n  }\n\n  findPos(obj) {\n    let curleft = 0,\n        curtop = 0;\n\n    if (obj.offsetParent) {\n      do {\n        curleft += obj.offsetLeft;\n        curtop += obj.offsetTop;\n      } while (obj = obj.offsetParent);\n\n      return {\n        x: curleft,\n        y: curtop\n      };\n    }\n\n    return undefined;\n  }\n\n  rgbToHex(r, g, b) {\n    if (r > 255 || g > 255 || b > 255) throw \"Invalid color component\";\n    return (r << 16 | g << 8 | b).toString(16);\n  }\n\n  _handleFindPosition(e) {\n    let canvas = this.canvasRef;\n    let ctx = canvas.current.getContext(\"2d\");\n    var pos = this.findPos(canvas.current);\n    var x = e.pageX - pos.x;\n    var y = e.pageY - pos.y; // var coord = \"x=\" + x + \", y=\" + y;\n\n    var p = ctx.getImageData(x, y, 10, 10).data;\n    var hex = \"#\" + (\"000000\" + this.rgbToHex(p[0], p[1], p[2])).slice(-6);\n    console.log(hex.substring(1, hex.length - 1));\n\n    if (hex.substring(1, hex.length - 1) !== \"00000\") {\n      console.log('white condition');\n      this.setState({\n        colorMap: this.state.colorMap.add(hex)\n      });\n    }\n\n    console.log(this.state.colorMap);\n  }\n\n  _handleImageChange(e) {\n    e.preventDefault();\n    let i = new Image();\n    this.setState({\n      file: \"\",\n      imagePreviewUrl: \"\",\n      colorMap: new Set()\n    });\n    let reader = new FileReader();\n    let file = e.target.files[0];\n\n    reader.onloadend = e => {\n      this.setState({\n        file: file,\n        imagePreviewUrl: reader.result\n      });\n      let ctx = this.canvasRef.current.getContext(\"2d\");\n      i.src = e.target.result;\n      ctx.drawImage(i, 0, 0, 240, 240);\n    };\n\n    reader.readAsDataURL(file);\n  }\n\n  render() {\n    let {\n      imagePreviewUrl\n    } = this.state;\n    let $imagePreview = null;\n\n    if (imagePreviewUrl) {\n      $imagePreview = /*#__PURE__*/_jsxDEV(\"img\", {\n        ref: this.imgRef,\n        height: 240,\n        width: 240,\n        alt: \"img\",\n        src: imagePreviewUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 30\n      }, this);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"previewComponent\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: e => this._handleSubmit(e),\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"fileInput\",\n            type: \"file\",\n            onChange: e => this._handleImageChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"imgPreview\",\n          children: $imagePreview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Canvas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          onMouseMove: e => this._handleFindPosition(e),\n          ref: this.canvasRef,\n          width: 240,\n          height: 240\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this);\n    } else {\n      $imagePreview = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"previewText\",\n        children: \"Please select an Image for Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 30\n      }, this);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"previewComponent\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: e => this._handleSubmit(e),\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"fileInput\",\n            type: \"file\",\n            onChange: e => this._handleImageChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"imgPreview\",\n          children: $imagePreview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Canvas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          width: 0,\n          height: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/josephmuruguru/go/src/github.com/kat-generator/src/components/upload.js"],"names":["React","Uploader","Component","constructor","props","canvasRef","createRef","imgRef","state","file","imagePreviewUrl","colorMap","Set","componentDidMount","canvas","img","ctx","current","getContext","_handleSubmit","e","preventDefault","console","log","findPos","obj","curleft","curtop","offsetParent","offsetLeft","offsetTop","x","y","undefined","rgbToHex","r","g","b","toString","_handleFindPosition","pos","pageX","pageY","p","getImageData","data","hex","slice","substring","length","setState","add","_handleImageChange","i","Image","reader","FileReader","target","files","onloadend","result","src","drawImage","readAsDataURL","render","$imagePreview"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nexport class Uploader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.imgRef = React.createRef();\n        this.state = {file: '', imagePreviewUrl: '', colorMap: new Set()};\n    }\n\n    componentDidMount() {\n        const canvas = this.canvasRef\n        const img = this.imgRef;\n        const ctx = canvas.current.getContext(\"2d\");\n    }\n\n    _handleSubmit(e) {\n        e.preventDefault();\n        // TODO: do something with -> this.state.file\n        console.log('handle uploading-', this.state.file);\n    }\n\n    findPos(obj) {\n        let curleft = 0, curtop = 0;\n        if (obj.offsetParent) {\n            do {\n                curleft += obj.offsetLeft;\n                curtop += obj.offsetTop;\n            } while (obj = obj.offsetParent);\n            return { x: curleft, y: curtop };\n        }\n        return undefined;\n    }\n\n    rgbToHex(r, g, b) {\n        if (r > 255 || g > 255 || b > 255)\n            throw \"Invalid color component\";\n        return ((r << 16) | (g << 8) | b).toString(16);\n    }\n\n    _handleFindPosition(e) {\n        let canvas = this.canvasRef\n        let ctx = canvas.current.getContext(\"2d\");\n        var pos = this.findPos(canvas.current);\n        var x = e.pageX - pos.x;\n        var y = e.pageY - pos.y;\n        // var coord = \"x=\" + x + \", y=\" + y;\n        var p = ctx.getImageData(x, y, 10, 10).data;\n        var hex = \"#\" + (\"000000\" + this.rgbToHex(p[0], p[1], p[2])).slice(-6);\n        console.log(hex.substring(1, hex.length - 1))\n        if (hex.substring(1, hex.length - 1) !== \"00000\") {\n            console.log('white condition');\n            this.setState({\n                colorMap: this.state.colorMap.add(hex)\n            });\n        }\n        console.log(this.state.colorMap);\n    }\n\n    _handleImageChange(e) {\n        e.preventDefault();\n        let i = new Image();\n        this.setState({\n            file: \"\",\n            imagePreviewUrl: \"\",\n            colorMap: new Set()\n        });\n        let reader = new FileReader();\n        let file = e.target.files[0];\n\n        reader.onloadend = (e) => {\n            this.setState({\n                file: file,\n                imagePreviewUrl: reader.result\n            });\n\n            let ctx = this.canvasRef.current.getContext(\"2d\");\n            i.src = e.target.result;\n            ctx.drawImage(i, 0, 0, 240,240);\n\n        }\n        reader.readAsDataURL(file)\n    }\n\n    render() {\n        let {imagePreviewUrl} = this.state;\n        let $imagePreview = null;\n        if (imagePreviewUrl) {\n            $imagePreview = (<img ref={this.imgRef} height={240} width={240} alt={\"img\"} src={imagePreviewUrl}/>);\n            return (\n                <div className=\"previewComponent\">\n                    <form onSubmit={(e) => this._handleSubmit(e)}>\n                        <input className=\"fileInput\"\n                               type=\"file\"\n                               onChange={(e) => this._handleImageChange(e)}/>\n                    </form>\n                    <div className=\"imgPreview\">\n                        {$imagePreview}\n                    </div>\n                    <br/>\n                    <h4>Canvas</h4>\n                    <canvas\n                        onMouseMove={(e) => this._handleFindPosition(e)}\n                        ref={this.canvasRef} width={240} height={240} />\n                </div>\n            );\n        } else {\n            $imagePreview = (<div className=\"previewText\">Please select an Image for Preview</div>);\n            return (\n                <div className=\"previewComponent\">\n                    <form onSubmit={(e) => this._handleSubmit(e)}>\n                        <input className=\"fileInput\"\n                               type=\"file\"\n                               onChange={(e) => this._handleImageChange(e)}/>\n                    </form>\n                    <div className=\"imgPreview\">\n                        {$imagePreview}\n                    </div>\n                    <h4>Canvas</h4>\n                    <canvas ref={this.canvasRef} width={0} height={0} />\n                </div>\n            );\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}