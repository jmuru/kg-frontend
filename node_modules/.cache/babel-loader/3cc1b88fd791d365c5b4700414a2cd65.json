{"ast":null,"code":"export function applyColorPalette(mapping, palette) {\n  if (!mapping) {\n    return [];\n  }\n\n  let paletteMap = {};\n  paletteMap[\"empty\"] = \"#ffffff\";\n  paletteMap[\"outline\"] = \"#000000\";\n  let paletteCopy = palette;\n  let colorMapping = [];\n\n  for (let i = 0; i < 24; i++) {\n    const currentRow = mapping[i];\n    currentRow.forEach(el => {\n      if (!paletteCopy.length && !paletteMap.hasOwnProperty(el)) {\n        paletteMap[el] = `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n      }\n\n      if (paletteMap.hasOwnProperty(el)) {} else {\n        let rIndex = getRandomColorFromPalette(paletteCopy);\n        paletteMap[el] = `#${paletteCopy[rIndex]}`;\n        paletteCopy.splice(rIndex, 1);\n      }\n    });\n  }\n\n  colorMapping = applyColorMap(mapping, paletteMap);\n  return colorMapping;\n}\n\nfunction getRandomColorFromPalette(palette) {\n  let length = palette.length;\n  return Math.floor(Math.random() * length);\n}\n\nfunction applyColorMap(map, pMap) {\n  let final = [];\n\n  for (let i = 0; i < 24; i++) {\n    let transformRow = map[i].map(el => {\n      return pMap[el];\n    });\n    final.push(transformRow);\n  }\n\n  return final;\n}\n\nexport function getBackgroundColorMap(bg) {\n  const mapping = [];\n\n  for (let i = 0; i < 24; i++) {\n    mapping.push(bg[i]);\n  }\n\n  return mapping;\n}\nexport function mergeLayers(source, edit) {\n  let start = source;\n\n  for (let index = 0; index < source.length; index++) {\n    for (let j = 0; j < source.length; j++) {\n      if (edit[index][j] == \"#ffffff\") {\n        continue;\n      } else {\n        start[index][j] = edit[index][j];\n      }\n    }\n  }\n\n  return start;\n}\nexport function redrawFromMatrix(colorMatrix, canvasContext) {\n  for (var height = 0; height < 24; height++) {\n    for (let index = 0; index < 24; index++) {\n      if (colorMatrix[height][index] === \"#ffffff\") {\n        canvasContext.fillStyle = \"#ffffff\";\n      } else {\n        canvasContext.fillStyle = colorMatrix[height][index];\n      }\n\n      var w = index * 10;\n      var h = height * 10;\n      canvasContext.fillRect(w, h, 10, 10);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/josephmuruguru/go/src/github.com/kat-generator/src/util/generator-helper.js"],"names":["applyColorPalette","mapping","palette","paletteMap","paletteCopy","colorMapping","i","currentRow","forEach","el","length","hasOwnProperty","Math","floor","random","toString","rIndex","getRandomColorFromPalette","splice","applyColorMap","map","pMap","final","transformRow","push","getBackgroundColorMap","bg","mergeLayers","source","edit","start","index","j","redrawFromMatrix","colorMatrix","canvasContext","height","fillStyle","w","h","fillRect"],"mappings":"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","sourcesContent":["export function applyColorPalette(mapping, palette) {\n    if (!mapping) {\n        return [];\n    }\n    let paletteMap = {};\n    paletteMap[\"empty\"] = \"#ffffff\";\n    paletteMap[\"outline\"] = \"#000000\";\n    let paletteCopy = palette;\n    let colorMapping = [];\n    for (let i = 0; i < 24; i++) {\n        const currentRow = mapping[i];\n        currentRow.forEach(el => {\n            if (!paletteCopy.length && !paletteMap.hasOwnProperty(el)) {\n                paletteMap[el] = `#${Math.floor(Math.random()*16777215).toString(16)}`;\n            }\n            if (paletteMap.hasOwnProperty(el)) {\n            } else {\n                let rIndex = getRandomColorFromPalette(paletteCopy)\n                paletteMap[el] = `#${paletteCopy[rIndex]}`;\n                paletteCopy.splice(rIndex, 1);\n            }\n        });\n    }\n    colorMapping = applyColorMap(mapping, paletteMap);\n    return colorMapping;\n}\n\nfunction getRandomColorFromPalette(palette) {\n    let length = palette.length;\n    return Math.floor(Math.random() * length);\n}\n\nfunction applyColorMap(map, pMap) {\n    let final = [];\n    for (let i = 0; i < 24; i++) {\n        let transformRow = map[i].map(el => {\n            return pMap[el];\n        })\n        final.push(transformRow);\n    }\n    return final\n}\n\nexport function getBackgroundColorMap(bg) {\n    const mapping = [];\n    for (let i = 0; i < 24; i++) {\n        mapping.push(bg[i])\n    }\n    return mapping;\n}\n\nexport function mergeLayers(source, edit) {\n    let start = source;\n    for (let index = 0; index < source.length; index++) {\n        for (let j = 0; j < source.length; j++) {\n            if (edit[index][j] == \"#ffffff\") {\n                continue;\n            } else {\n                start[index][j] = edit[index][j];\n            }\n        }\n    }\n    return start;\n}\n\nexport function redrawFromMatrix(colorMatrix, canvasContext) {\n    for (var height = 0; height < 24; height++ ){\n        for (let index = 0; index < 24; index++) {\n            if (colorMatrix[height][index] === \"#ffffff\") {\n                canvasContext.fillStyle = \"#ffffff\";\n            } else {\n                canvasContext.fillStyle = colorMatrix[height][index]\n            }\n\n            var w = index * 10;\n            var h = height * 10\n            canvasContext.fillRect(w, h, 10, 10);\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}