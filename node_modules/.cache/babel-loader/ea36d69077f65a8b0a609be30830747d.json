{"ast":null,"code":"export function applyColorPalette(mapping, palette) {\n  // console.log(\"this is the raw mapping\", mapping);\n  let paletteMap = {};\n  paletteMap[\"empty\"] = \"#ffffff\";\n  paletteMap[\"outline\"] = \"#000000\";\n  let paletteCopy = palette;\n  let colorMapping = [];\n\n  for (let i = 0; i < 24; i++) {\n    const currentRow = mapping[i]; // console.log(\"what is the current row\", currentRow);\n\n    currentRow.forEach(el => {\n      if (!paletteCopy.length && !paletteMap.hasOwnProperty(el)) {\n        paletteMap[el] = `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n      }\n\n      if (paletteMap.hasOwnProperty(el)) {} else {\n        let rIndex = getRandomColorFromPalette(paletteCopy);\n        paletteMap[el] = `#${paletteCopy[rIndex]}`;\n        paletteCopy.splice(rIndex, 1);\n      }\n    });\n  }\n\n  console.log(\"what is the pallete map\", paletteMap);\n  colorMapping = applyColorMap(mapping, paletteMap);\n  return colorMapping;\n}\n\nfunction getRandomColorFromPalette(palette) {\n  let length = palette.length;\n  return Math.floor(Math.random() * length);\n}\n\nfunction applyColorMap(map, pMap) {\n  let final = [];\n\n  for (let i = 0; i < 24; i++) {\n    let transformRow = map[i].map(el => {\n      return pMap[el];\n    });\n    final.push(transformRow);\n  }\n\n  console.log(\"final result\", final);\n}","map":{"version":3,"sources":["/Users/josephmuruguru/go/src/github.com/kat-generator/src/util/generator-helper.js"],"names":["applyColorPalette","mapping","palette","paletteMap","paletteCopy","colorMapping","i","currentRow","forEach","el","length","hasOwnProperty","Math","floor","random","toString","rIndex","getRandomColorFromPalette","splice","console","log","applyColorMap","map","pMap","final","transformRow","push"],"mappings":"AAAA,OAAO,SAASA,iBAAT,CAA2BC,OAA3B,EAAoCC,OAApC,EAA6C;AAChD;AACA,MAAIC,UAAU,GAAG,EAAjB;AACAA,EAAAA,UAAU,CAAC,OAAD,CAAV,GAAsB,SAAtB;AACAA,EAAAA,UAAU,CAAC,SAAD,CAAV,GAAwB,SAAxB;AACA,MAAIC,WAAW,GAAGF,OAAlB;AACA,MAAIG,YAAY,GAAG,EAAnB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,UAAMC,UAAU,GAAGN,OAAO,CAACK,CAAD,CAA1B,CADyB,CAEzB;;AACAC,IAAAA,UAAU,CAACC,OAAX,CAAmBC,EAAE,IAAI;AACrB,UAAI,CAACL,WAAW,CAACM,MAAb,IAAuB,CAACP,UAAU,CAACQ,cAAX,CAA0BF,EAA1B,CAA5B,EAA2D;AACvDN,QAAAA,UAAU,CAACM,EAAD,CAAV,GAAkB,IAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CAAgD,EAArE;AACH;;AACD,UAAIZ,UAAU,CAACQ,cAAX,CAA0BF,EAA1B,CAAJ,EAAmC,CAClC,CADD,MACO;AACH,YAAIO,MAAM,GAAGC,yBAAyB,CAACb,WAAD,CAAtC;AACAD,QAAAA,UAAU,CAACM,EAAD,CAAV,GAAkB,IAAGL,WAAW,CAACY,MAAD,CAAS,EAAzC;AACAZ,QAAAA,WAAW,CAACc,MAAZ,CAAmBF,MAAnB,EAA2B,CAA3B;AACH;AACJ,KAVD;AAWH;;AACDG,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCjB,UAAvC;AACAE,EAAAA,YAAY,GAAGgB,aAAa,CAACpB,OAAD,EAAUE,UAAV,CAA5B;AACA,SAAOE,YAAP;AACH;;AAED,SAASY,yBAAT,CAAmCf,OAAnC,EAA4C;AACxC,MAAIQ,MAAM,GAAGR,OAAO,CAACQ,MAArB;AACA,SAAOE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,MAA3B,CAAP;AACH;;AAED,SAASW,aAAT,CAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAC9B,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,QAAImB,YAAY,GAAGH,GAAG,CAAChB,CAAD,CAAH,CAAOgB,GAAP,CAAWb,EAAE,IAAI;AAChC,aAAOc,IAAI,CAACd,EAAD,CAAX;AACH,KAFkB,CAAnB;AAGAe,IAAAA,KAAK,CAACE,IAAN,CAAWD,YAAX;AACH;;AACDN,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BI,KAA5B;AACH","sourcesContent":["export function applyColorPalette(mapping, palette) {\n    // console.log(\"this is the raw mapping\", mapping);\n    let paletteMap = {};\n    paletteMap[\"empty\"] = \"#ffffff\";\n    paletteMap[\"outline\"] = \"#000000\";\n    let paletteCopy = palette;\n    let colorMapping = [];\n    for (let i = 0; i < 24; i++) {\n        const currentRow = mapping[i];\n        // console.log(\"what is the current row\", currentRow);\n        currentRow.forEach(el => {\n            if (!paletteCopy.length && !paletteMap.hasOwnProperty(el)) {\n                paletteMap[el] = `#${Math.floor(Math.random()*16777215).toString(16)}`;\n            }\n            if (paletteMap.hasOwnProperty(el)) {\n            } else {\n                let rIndex = getRandomColorFromPalette(paletteCopy)\n                paletteMap[el] = `#${paletteCopy[rIndex]}`;\n                paletteCopy.splice(rIndex, 1);\n            }\n        });\n    }\n    console.log(\"what is the pallete map\", paletteMap);\n    colorMapping = applyColorMap(mapping, paletteMap);\n    return colorMapping;\n}\n\nfunction getRandomColorFromPalette(palette) {\n    let length = palette.length;\n    return Math.floor(Math.random() * length);\n}\n\nfunction applyColorMap(map, pMap) {\n    let final = [];\n    for (let i = 0; i < 24; i++) {\n        let transformRow = map[i].map(el => {\n            return pMap[el];\n        })\n        final.push(transformRow);\n    }\n    console.log(\"final result\", final);\n}"]},"metadata":{},"sourceType":"module"}