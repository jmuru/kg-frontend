{"ast":null,"code":"export function applyColorPalette(mapping,palette){if(!mapping){return[];}var paletteMap={};paletteMap[\"empty\"]=\"#ffffff\";paletteMap[\"outline\"]=\"#000000\";var paletteCopy=palette;var colorMapping=[];for(var i=0;i<24;i++){var currentRow=mapping[i];currentRow.forEach(function(el){if(!paletteCopy.length&&!paletteMap.hasOwnProperty(el)){paletteMap[el]=\"#\".concat(Math.floor(Math.random()*16777215).toString(16));}if(paletteMap.hasOwnProperty(el)){}else{var rIndex=getRandomColorFromPalette(paletteCopy);paletteMap[el]=\"#\".concat(paletteCopy[rIndex]);paletteCopy.splice(rIndex,1);}});}colorMapping=applyColorMap(mapping,paletteMap);return colorMapping;}function getRandomColorFromPalette(palette){var length=palette.length;return Math.floor(Math.random()*length);}function applyColorMap(map,pMap){var final=[];for(var i=0;i<24;i++){var transformRow=map[i].map(function(el){return pMap[el];});final.push(transformRow);}return final;}export function getBackgroundColorMap(bg){var mapping=[];for(var i=0;i<24;i++){mapping.push(bg[i]);}return mapping;}export function mergeLayers(source,edit){if(edit.length<24){return source;}var start=source;for(var index=0;index<source.length;index++){for(var j=0;j<source.length;j++){if(edit[index][j]==\"#ffffff\"){continue;}else{start[index][j]=edit[index][j];}}}return start;}export function redrawFromMatrix(colorMatrix,canvasContext){for(var height=0;height<24;height++){for(var index=0;index<24;index++){if(colorMatrix[height][index]===\"#ffffff\"){canvasContext.fillStyle=\"#ffffff\";}else{canvasContext.fillStyle=colorMatrix[height][index];}var w=index*10;var h=height*10;canvasContext.fillRect(w,h,10,10);}}}","map":{"version":3,"sources":["/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/util/generator-helper.js"],"names":["applyColorPalette","mapping","palette","paletteMap","paletteCopy","colorMapping","i","currentRow","forEach","el","length","hasOwnProperty","Math","floor","random","toString","rIndex","getRandomColorFromPalette","splice","applyColorMap","map","pMap","final","transformRow","push","getBackgroundColorMap","bg","mergeLayers","source","edit","start","index","j","redrawFromMatrix","colorMatrix","canvasContext","height","fillStyle","w","h","fillRect"],"mappings":"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","sourcesContent":["export function applyColorPalette(mapping, palette) {\n    if (!mapping) {\n        return [];\n    }\n    let paletteMap = {};\n    paletteMap[\"empty\"] = \"#ffffff\";\n    paletteMap[\"outline\"] = \"#000000\";\n    let paletteCopy = palette;\n    let colorMapping = [];\n    for (let i = 0; i < 24; i++) {\n        const currentRow = mapping[i];\n        currentRow.forEach(el => {\n            if (!paletteCopy.length && !paletteMap.hasOwnProperty(el)) {\n                paletteMap[el] = `#${Math.floor(Math.random()*16777215).toString(16)}`;\n            }\n            if (paletteMap.hasOwnProperty(el)) {\n            } else {\n                let rIndex = getRandomColorFromPalette(paletteCopy)\n                paletteMap[el] = `#${paletteCopy[rIndex]}`;\n                paletteCopy.splice(rIndex, 1);\n            }\n        });\n    }\n    colorMapping = applyColorMap(mapping, paletteMap);\n    return colorMapping;\n}\n\nfunction getRandomColorFromPalette(palette) {\n    let length = palette.length;\n    return Math.floor(Math.random() * length);\n}\n\nfunction applyColorMap(map, pMap) {\n    let final = [];\n    for (let i = 0; i < 24; i++) {\n        let transformRow = map[i].map(el => {\n            return pMap[el];\n        })\n        final.push(transformRow);\n    }\n    return final\n}\n\nexport function getBackgroundColorMap(bg) {\n    const mapping = [];\n    for (let i = 0; i < 24; i++) {\n        mapping.push(bg[i])\n    }\n    return mapping;\n}\n\nexport function mergeLayers(source, edit) {\n    if (edit.length < 24) {\n        return source;\n    }\n    let start = source;\n    for (let index = 0; index < source.length; index++) {\n        for (let j = 0; j < source.length; j++) {\n            if (edit[index][j] == \"#ffffff\") {\n                continue;\n            } else {\n                start[index][j] = edit[index][j];\n            }\n        }\n    }\n    return start;\n}\n\nexport function redrawFromMatrix(colorMatrix, canvasContext) {\n    for (var height = 0; height < 24; height++ ){\n        for (let index = 0; index < 24; index++) {\n            if (colorMatrix[height][index] === \"#ffffff\") {\n                canvasContext.fillStyle = \"#ffffff\";\n            } else {\n                canvasContext.fillStyle = colorMatrix[height][index]\n            }\n            var w = index * 10;\n            var h = height * 10\n            canvasContext.fillRect(w, h, 10, 10);\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}