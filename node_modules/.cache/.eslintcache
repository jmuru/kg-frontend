[{"/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/index.js":"1","/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/reportWebVitals.js":"2","/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/App.js":"3","/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/routes/GenerateKat.js":"4","/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/routes/CreateAccessory.js":"5","/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/components/generate.js":"6","/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/components/upload.js":"7","/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/util/dao.js":"8","/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/util/generator-helper.js":"9","/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/util/accessory-helpers.js":"10"},{"size":500,"mtime":1620511094722,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1620511094722,"results":"13","hashOfConfig":"12"},{"size":1201,"mtime":1621213276737,"results":"14","hashOfConfig":"12"},{"size":283,"mtime":1621061741483,"results":"15","hashOfConfig":"12"},{"size":286,"mtime":1620535313073,"results":"16","hashOfConfig":"12"},{"size":2828,"mtime":1621203574785,"results":"17","hashOfConfig":"12"},{"size":5718,"mtime":1620706883737,"results":"18","hashOfConfig":"12"},{"size":959,"mtime":1621216032817,"results":"19","hashOfConfig":"12"},{"size":2406,"mtime":1621200963197,"results":"20","hashOfConfig":"12"},{"size":1476,"mtime":1620607462824,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1odg6xy",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/index.js",[],["46","47"],"/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/reportWebVitals.js",[],"/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/App.js",[],"/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/routes/GenerateKat.js",[],"/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/routes/CreateAccessory.js",[],"/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/components/generate.js",[],"/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/components/upload.js",["48"],"import React from \"react\";\nimport {findPosition, rgbToHex, recordMappingMatrix} from \"../util/accessory-helpers\";\nimport {postAccessoryData} from \"../util/dao\";\n\nexport class Uploader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.imgRef = React.createRef();\n        this.state = {file: '', imagePreviewUrl: '', colorMap: {}, placement: '', subType: ''};\n    }\n\n    componentDidMount() {\n        const img = this.imgRef;\n    }\n\n    _generateCanvas() {\n        return (\n            <div>\n                <canvas\n                    onMouseMove={(e) => this._handleFindPosition(e)}\n                    ref={this.canvasRef} width={240} height={240} />\n            </div>\n        )\n    }\n\n    _scanCanvas() {\n        let canvas = this.canvasRef;\n        let mapping = {}\n        const matrix = recordMappingMatrix(canvas.current);\n        matrix.forEach((row, index) => {\n            mapping[index] = row;\n        })\n        this.setState({\n            colorMap: mapping\n        });\n        console.log(mapping);\n    }\n\n    _saveAccessory() {\n        if (this.state.placement !== \"\" && this.state.subtype !== \"\" && this.state.colorMap !== {}) {\n            postAccessoryData(this.state.placement, this.state.subType, this.state.colorMap)\n        } else {\n            alert(\"unable to save accessory plz review configuration\");\n        }\n\n    }\n\n\n\n    _handlePlacementChange(e) {\n        this.setState({\n            placement: e.target.value\n        })\n    }\n\n    _handleSubTypeChange(e) {\n        this.setState({\n            subType: e.target.value,\n        })\n    }\n\n    _handleSubmit(e) {\n        e.preventDefault();\n        // TODO: do something with -> this.state.file\n        console.log('handle uploading-', this.state.file);\n    }\n\n    _handleFindPosition(e) {\n        let canvas = this.canvasRef;\n        let ctx = canvas.current.getContext(\"2d\");\n        var pos = findPosition(canvas.current);\n        var x = e.pageX - pos.x;\n        var y = e.pageY - pos.y;\n        var p = ctx.getImageData(x, y, 10, 10).data;\n        var hex = \"#\" + (\"000000\" + rgbToHex(p[0], p[1], p[2])).slice(-6);\n        console.log(hex);\n    }\n\n    _handleImageChange(e) {\n        e.preventDefault();\n\n        let reader = new FileReader();\n        let file = e.target.files[0];\n        reader.onloadstart = (e) => {\n            let ctx = this.canvasRef.current.getContext(\"2d\");\n            ctx.clearRect(0, 0,240, 240);\n        }\n        reader.onloadend = (e) => {\n            this.setState({\n                file: file,\n                imagePreviewUrl: reader.result,\n                colorMap: {},\n                placement: \"\",\n                subType: \"\",\n            });\n\n            let i = new Image();\n            i.onload = (e) => {\n                let ctx = this.canvasRef.current.getContext(\"2d\");\n\n                ctx.fillStyle = 'white';\n                ctx.fillRect(0, 0, 240, 240);\n                ctx.drawImage(i, 0, 0, 240,240);\n            }\n            i.src = this.state.imagePreviewUrl;\n        }\n\n        reader.readAsDataURL(file)\n    }\n\n    render() {\n        let {imagePreviewUrl} = this.state;\n        let $imagePreview = null;\n        if (imagePreviewUrl) {\n\n            return (\n                <div className=\"previewComponent\">\n                    <form onSubmit={(e) => this._handleSubmit(e)}>\n                        <input className=\"fileInput\"\n                               type=\"file\"\n                               onChange={(e) => this._handleImageChange(e)}/>\n                    </form>\n                    <div className=\"imgPreview\">\n                        <img ref={this.imgRef} height={240} width={240} alt={\"img\"} src={imagePreviewUrl}/>\n                    </div>\n                    <br/>\n                    <h4>Canvas</h4>\n                    {this._generateCanvas()}\n                    <br/>\n                    <button onClick={() => this._scanCanvas()}>scan</button>\n                    <br />\n                    <form id=\"save-accessory\">\n                        <label>enter subtype</label>\n                        <input className={\"subtype-input\"} type={\"text\"} value={this.state.subType} onChange={(e) => this._handleSubTypeChange(e)} />\n                        <br />\n                        <label>choose placement</label>\n                        <select value={this.state.placement} onChange={(e) => this._handlePlacementChange(e)}>\n                            <option value=\"\">Select your option</option>\n                            {\n                                [\"top\", \"mid\", \"bottom\", \"custom\"].map((el, i) => {\n                                    return (<option value={el} key={`${i}_option`}>{el}</option>)\n                                })\n                            }\n                        </select>\n                    </form>\n                    <button onClick={(e) => this._saveAccessory(e)} >Save Accessory</button>\n                </div>\n            );\n        } else {\n            $imagePreview = (<div className=\"previewText\">Please select an Image for Preview</div>);\n            return (\n                <div className=\"previewComponent\">\n                    <form onSubmit={(e) => this._handleSubmit(e)}>\n                        <input className=\"fileInput\"\n                               type=\"file\"\n                               onChange={(e) => this._handleImageChange(e)}/>\n                    </form>\n                    <div className=\"imgPreview\">\n                        {$imagePreview}\n                    </div>\n                    <h4>Canvas</h4>\n                    {this._generateCanvas()}\n                </div>\n            );\n        }\n    }\n}\n","/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/util/dao.js",["49"],"/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/util/generator-helper.js",["50"],"export function applyColorPalette(mapping, palette) {\n    if (!mapping) {\n        return [];\n    }\n    let paletteMap = {};\n    paletteMap[\"empty\"] = \"#ffffff\";\n    paletteMap[\"outline\"] = \"#000000\";\n    paletteMap[\"pupils\"] = \"#fffffe\";\n    let paletteCopy = palette;\n    let colorMapping = [];\n    for (let i = 0; i < 24; i++) {\n        const currentRow = mapping[i];\n        currentRow.forEach(el => {\n            if (!paletteCopy.length && !paletteMap.hasOwnProperty(el)) {\n                paletteMap[el] = `#${Math.floor(Math.random()*16777215).toString(16)}`;\n            }\n            if (paletteMap.hasOwnProperty(el)) {\n            } else {\n                let rIndex = getRandomColorFromPalette(paletteCopy)\n                paletteMap[el] = `#${paletteCopy[rIndex]}`;\n                paletteCopy.splice(rIndex, 1);\n            }\n        });\n    }\n    colorMapping = applyColorMap(mapping, paletteMap);\n    return colorMapping;\n}\n\nfunction getRandomColorFromPalette(palette) {\n    let length = palette.length;\n    return Math.floor(Math.random() * length);\n}\n\nfunction applyColorMap(map, pMap) {\n    let final = [];\n    for (let i = 0; i < 24; i++) {\n        let transformRow = map[i].map(el => {\n            return pMap[el];\n        })\n        final.push(transformRow);\n    }\n    return final\n}\n\nexport function getBackgroundColorMap(bg) {\n    const mapping = [];\n    for (let i = 0; i < 24; i++) {\n        mapping.push(bg[i])\n    }\n    return mapping;\n}\n\nexport function mergeLayers(source, edit) {\n    if (edit.length < 24) {\n        return source;\n    }\n    let start = source;\n    for (let index = 0; index < source.length; index++) {\n        for (let j = 0; j < source.length; j++) {\n            if (edit[index][j] == \"#ffffff\") {\n                continue;\n            } else {\n                start[index][j] = edit[index][j];\n            }\n        }\n    }\n    return start;\n}\n\nexport function redrawFromMatrix(colorMatrix, canvasContext) {\n    for (var height = 0; height < 24; height++ ){\n        for (let index = 0; index < 24; index++) {\n            if (colorMatrix[height][index] === \"#ffffff\") {\n                canvasContext.fillStyle = \"#ffffff\";\n            } else {\n                canvasContext.fillStyle = colorMatrix[height][index]\n            }\n            var w = index * 10;\n            var h = height * 10\n            canvasContext.fillRect(w, h, 10, 10);\n        }\n    }\n}","/Users/josephmuruguru/go/src/github.com/kat-generator/KGF/src/util/accessory-helpers.js",["51","52"],"export function findPosition(obj) {\n    let curleft = 0, curtop = 0;\n    if (obj.offsetParent) {\n        do {\n            curleft += obj.offsetLeft;\n            curtop += obj.offsetTop;\n        } while (obj = obj.offsetParent);\n        return { x: curleft, y: curtop };\n    }\n    return undefined;\n}\n\nexport function  rgbToHex(r,g,b) {\n    if (r > 255 || g > 255 || b > 255)\n        throw \"Invalid color component\";\n    return ((r << 16) | (g << 8) | b).toString(16);\n}\n\nfunction buildEmptyMatrix(height) {\n    var m = [];\n    for (var i = 0; i < height; i++) {\n        m.push([]);\n    }\n    return m\n}\n\nexport function recordMappingMatrix(canvas) {\n    let colorMatrix = buildEmptyMatrix(24);\n    let context = canvas.getContext('2d');\n    for (let height = 0; height < 24; height++ ){\n        for (let index = 0; index < 24; index++) {\n            let w = index * 10;\n            let h = height * 10\n\n            let p = context.getImageData(w, h, 9, 9).data;\n            let hex = \"#\" + (\"000000\" + rgbToHex(p[0], p[1], p[2])).slice(-6);\n            switch (hex) {\n                case \"#000000\":\n                    colorMatrix[height][index] = \"outline\";\n                    break;\n                case \"#ffffff\":\n                    colorMatrix[height][index] = \"empty\";\n                    break;\n                default:\n                    colorMatrix[height][index] = `color_${hex}`;\n                    break;\n            }\n        }\n    }\n    return colorMatrix;\n}",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":14,"column":15,"nodeType":"59","messageId":"60","endLine":14,"endColumn":18},{"ruleId":"57","severity":1,"message":"61","line":3,"column":7,"nodeType":"59","messageId":"60","endLine":3,"endColumn":22},{"ruleId":"62","severity":1,"message":"63","line":60,"column":32,"nodeType":"64","messageId":"65","endLine":60,"endColumn":34},{"ruleId":"66","severity":1,"message":"67","line":7,"column":18,"nodeType":"68","messageId":"69","endLine":7,"endColumn":40},{"ruleId":"70","severity":1,"message":"71","line":15,"column":9,"nodeType":"72","messageId":"73","endLine":15,"endColumn":41},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'img' is assigned a value but never used.","Identifier","unusedVar","'SERVER_URL_BASE' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-global-assign","no-unsafe-negation"]